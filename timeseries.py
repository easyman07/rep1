# -*- coding: utf-8 -*-
"""timeseries.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1do6WA-sFWZoEEhSopiyxwg_fBRxZrxPO
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.stattools import kpss
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.arima.model import ARIMA

# Load the dataset
data = pd.read_csv('/content/AirPassengers.csv')
data['Month'] = pd.to_datetime(data['Month'])
data.set_index('Month', inplace=True)

# Display data and data types
print("Data:")
print(data.head())  # Display first few rows of the DataFrame
print("\nData Types:")
print(data.dtypes)  # Display data types of each column

# Plot the data
plt.figure(figsize=(10, 6))
plt.plot(data, label='AirPassengers')
plt.title('AirPassengers Time Series')
plt.xlabel('Month')
plt.ylabel('Number of Passengers')
plt.legend()
plt.show()

# Check for stationarity using KPSS test
kpss_stat, kpss_p_value, _, _ = kpss(data['#Passengers'])
print(f'KPSS Statistic: {kpss_stat}')
print(f'p-value: {kpss_p_value}')
if kpss_p_value < 0.05:
    print('The time series is not stationary. Applying differencing.')
else:
    print('The time series is stationary.')

# Apply simple differencing to make the time series stationary
data_diff = data.diff().dropna()

# Plot differenced data
plt.figure(figsize=(10, 6))
plt.plot(data_diff, label='Differenced AirPassengers')
plt.title('Differenced AirPassengers Time Series')
plt.xlabel('Month')
plt.ylabel('Differenced Number of Passengers')
plt.legend()
plt.show()

# Decompose the time series into trend, seasonal, and residual components
decomposition = seasonal_decompose(data, model='additive')
trend = decomposition.trend
seasonal = decomposition.seasonal
residual = decomposition.resid

# Plot decomposition components
plt.figure(figsize=(12, 8))
plt.subplot(411)
plt.plot(data, label='Original')
plt.legend(loc='upper left')
plt.subplot(412)
plt.plot(trend, label='Trend')
plt.legend(loc='upper left')
plt.subplot(413)
plt.plot(seasonal, label='Seasonal')
plt.legend(loc='upper left')
plt.subplot(414)
plt.plot(residual, label='Residuals')
plt.legend(loc='upper left')
plt.tight_layout()
plt.show()

# Determine the order of AR(auto regressive) and MA(moving avrage) components using ACF and PACF plots
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf

plot_acf(data_diff, lags=20)
plt.title('ACF')
plt.show()

plot_pacf(data_diff, lags=20)
plt.title('PACF')
plt.show()

# Fit ARIMA model
model = ARIMA(data, order=(1, 1, 1))
results = model.fit()

# Forecast
forecast = results.forecast(steps=12)

# Plot results
plt.figure(figsize=(12, 6))
plt.plot(data.index, data, label='Actual')
plt.plot(pd.date_range(start=data.index[-1], periods=12, freq='MS'), forecast, label='Forecast')
plt.title('ARIMA Forecast')
plt.xlabel('Month')
plt.ylabel('Number of Passengers')
plt.legend()
plt.show()